#compdef aws

# AWS-supplied completion seems to be bash only
# (documentation includes zsh installation which however merely invokes
# the 'complete' function from bashcompinit)

_find_aws_endpoint() {
  if [[ -n $profile && -f $HOME/.aws/config ]] ; then
    # note caret escape
    grep $profile -A15 $HOME/.aws/config |
      grep \^endpoint -m1 | \
      cut -d= -f2 | awk '{print $1}' | \
      sed 's/:/\\:/g'
  fi
}

_s3_endpoint() {
  extracted=$(_find_aws_endpoint)
  #[[ -n $extracted ]] && _describe -t endpoint Endpoint extracted
  [[ -n $extracted ]] && _values Endpoint $extracted
}

_aws-s3() {
  _arguments \
    --endpoint+:Endpoint:_s3_endpoint \
    ':command:(configure ls rm cp sync)' \
    '*:file:_files' \
    && return
  return 1
}

_aws() {
  if [[ $service == aws ]]; then
    local curcontext=$curcontext state
    declare -A opt_args
    _arguments -C \
      '--profile+:Profile:->profile' \
      '(-): :->command' \
      '(-)*:: :->option-or-argument' && return

    # don't know how to retain opt_args and avoid this global variable
    profile=${opt_args[--profile]:-}

    case $state in
      (command)
        compadd s3
        return
        ;;
      (option-or-argument)
        curcontext=${curcontext%:*:*}:aws-$words[1]:
        integer ret=1
	if ! _call_function ret _aws-$words[1]; then
	  if [[ $words[1] = \!* ]]; then
	    words[1]=${words[1]##\!}
	    _normal && return
	  elif zstyle -T :completion:$curcontext: use-fallback; then
	    _default && return
	  else
	    _message "unknown sub-command: $words[1]"
	  fi
        fi
        return ret
        ;;
    esac
  fi
}

_aws
